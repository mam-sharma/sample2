input {
  file {
    path => "/var/log/storm/workers-artifacts/**/worker.log"
  }
}

filter {

    if [path] =~ "worker" {
        grok {
            match => [ "path", "/var/log/storm/workers-artifacts/%{NOTSPACE:stormId}/%{NOTSPACE:workerPort}/worker.log" ]
        }
    }

    multiline {
        pattern => "^%{TIMESTAMP_ISO8601}"
        negate => true
        what => "previous"
    }

    grok {
        match => [ "message", [
                "%{TIMESTAMP_ISO8601:timestamp} %{DATA:class} \[%{WORD:level}\] +%{GREEDYDATA:log_message}"
            ]
        ]
    }

    date {
        match => [ "timestamp" , "ISO8601" ]
    }

    if "multiline" in [tags] {
        mutate {
            add_field => {
                "stack_trace" => "%{message}"
            }
            remove_field => [ "message" ]
        }
    }

    if "multiline" not in [tags] {
        if "_grokparsefailure" in [tags] {
            mutate {
                update => {
                    "type" => "log_format_error"
                }
            }
        }

        if "_grokparsefailure" not in [tags] {
            mutate {
                remove_field => [ "message" ]
            }
        }
    }

    mutate {
        remove_field => [ "tags", "offset", "timestamp" ]
    }

    # The log_message can contain special characters that need escaping before it can go in a JSON string.
    mutate {
        # Logstash has obscure or broken handling of escapes
        # I can't figure out hor to represent double slash in the replacement string
        # So I'm using a capture group in the regex :-(
        gsub => [ "log_message", "([\\])", "\1\1" ]
    }
    mutate {
        # deliberately using single quotes in the replacement string to avoid having to escape the quote.
        gsub => [ "log_message", "[\"]", '\"' ]
    }
    # And just to confuse things it turns out that Seq treats braces containing variable references
    # So we need to escape them too :-(
    mutate {
        gsub => [ "log_message", "[{]", "{{" ]
    }
    mutate {
        gsub => [ "log_message", "[}]", "}}" ]
    }
}

output {
    if [path] =~ "worker" {
        http {
                url => "{{SEQ_URL}}"
                http_method => "post"
                content_type => "application/json; charset=UTF-8"
                headers => ["X-Seq-ApiKey", "{{SEQ_API_KEY}}"]
                format => "message"
                message => '{
                                "Events": [{
                                    "Timestamp": "%{@timestamp}",
                                    "Level": "%{level}",
                                    "MessageTemplate": "%{log_message}",
                                    "Properties": {
                                        "Application": "storm",
                                        "Component": "worker",
                                        "Environment": "{{ENVIRONMENT}}",
                                        "Host": "%{host}",
                                        "Path": "%{path}",
                                        "Class": "%{class}",
                                        "StormId": "%{stormId}",
                                        "WorkerPort": "%{workerPort}"
                                    }
                                }]
                            }'
            }
    } else {
        http {
                url => "{{SEQ_URL}}"
                http_method => "post"
                content_type => "application/json; charset=UTF-8"
                headers => ["X-Seq-ApiKey", "{{SEQ_API_KEY}}"]
                format => "message"
                message => '{
                                "Events": [{
                                    "Timestamp": "%{@timestamp}",
                                    "Level": "%{level}",
                                    "MessageTemplate": "%{log_message}",
                                    "Properties": {
                                        "Application": "storm",
                                        "Environment": "{{ENVIRONMENT}}",
                                        "Host": "%{host}",
                                        "Path": "%{path}",
                                        "Class": "%{class}"
                                    }
                                }]
                            }'
            }
    }
}
